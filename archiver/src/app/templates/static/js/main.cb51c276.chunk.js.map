{"version":3,"sources":["logo.svg","components/common/CustomUtilities.js","components/archiver/UserIpfsCids.js","components/archiver/Gallery.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["fetchPromise","url","options","fetch","then","response","status","console","log","contentType","headers","get","indexOf","json","displayCustomPopup","msg","data","type","Alert","error","position","html","effect","timeout","customFields","detailedError","detailedMsg","heading","success","info","warning","isUndefined","item","UserIpfsCids","props","cidsApiUrl","uploadToIpfsApiUrl","handleImagePreview","e","image_as_files","target","files","URL","createObjectURL","state","ipfsCids","user","archiver","fetchIpfsCidsForUser","bind","uploadToIpfs","callArchiveOnEth","ipfs_cid","this","methods","archive","send","from","on","hash","fileInput","document","querySelector","formData","FormData","append","method","body","ipfsUploadUri","cids","cid","includes","push","setState","catch","ipfsCidsFetchUri","docs","id","className","value","onClick","map","i","href","onChange","Component","ethUtil","require","sigUtil","Gallery","signDataAndMint","ipfs_hash","ipfs_url","a","web3","window","gallery","gallery_address","signer","deadline","Date","now","eth","getChainId","chainId","currentProvider","sendAsync","params","jsonrpc","err","result","msgParams","JSON","stringify","types","EIP712Domain","name","set","primaryType","domain","version","verifyingContract","message","sender","dir","alert","recovered","recoverTypedSignature","parse","sig","toChecksumAddress","signature","substring","r","s","v","parseInt","executeMintIfSignatureMatch","isMinting","hasAlreadyMinted","tokens","token","Main","account","loading","loadWeb3","loadBlockchainData","getAccounts","accounts","net","getId","networkId","archiverData","Archiver","networks","address","Contract","abi","galleryErc721Data","GalleryERC721","ethereum","Web3","enable","style","color","backgroundColor","height","borderColor","loadGallery","App","stack","limit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"q4ulBAAe,I,0HCMR,SAASA,EAAaC,EAAKC,GAC9B,OAAOC,MALG,wBAKaF,EAAKC,GAC3BE,MAAK,SAAAC,GACqB,MAApBA,EAASC,OACTC,QAAQC,IAAI,0BACe,MAApBH,EAASC,QACfC,QAAQC,IAAI,iBAEhB,IAAMC,EAAcJ,EAASK,QAAQC,IAAI,gBACzC,OAAIF,IAA4D,IAA7CA,EAAYG,QAAQ,oBAC5BP,EAASQ,OAETR,KAGZD,MAAK,SAAAC,GACJ,MAAuB,cAApBA,EAASC,QACRQ,EAAmB,CAACC,IAAKV,EAASU,KAAO,sCAAuC,SAEzE,MACmB,WAApBV,EAASC,QAA2C,iBAApBD,EAASC,QAC/CQ,EAAmBT,EAAU,SACtB,OACmB,YAApBA,EAASC,OACfQ,EAAmBT,EAAU,WACH,SAApBA,EAASC,QACfQ,EAAmBT,EAAU,WAG9BA,EAASW,KACDX,EAASW,KAEbX,MAMR,SAASS,EAAmBT,EAAUY,GACzC,OAAOA,GACH,IAAK,QACDV,QAAQC,IAAI,uBACZU,IAAMC,MAAMd,EAASU,IAAK,CACtBK,SAAU,eACVC,MAAM,EACNC,OAAQ,QACRC,QAAS,IACTC,aAAc,CACVC,cAAepB,EAASqB,YACxBC,QAAS,QACTV,KAAM,WAGd,MACJ,IAAK,UACDC,IAAMU,QAAQvB,EAASU,IAAK,CACxBK,SAAU,eACVC,MAAM,EACNC,OAAQ,QACRC,QAAS,IACTC,aAAc,CACVC,cAAepB,EAASqB,YACxBC,QAAS,UACTV,KAAM,aAGd,MACJ,IAAK,OACDV,QAAQC,IAAI,sBAAwBH,EAASU,KAC7CG,IAAMW,KAAKxB,EAASU,IAAK,CACrBK,SAAU,eACVC,MAAM,EACNC,OAAQ,QACRC,QAAS,IACTC,aAAc,CACVC,cAAepB,EAASqB,YACxBC,QAAS,OACTV,KAAM,UAGd,MACJ,IAAK,UACDC,IAAMY,QAAQzB,EAASU,IAAK,CACxBK,SAAU,eACVC,MAAM,EACNC,OAAQ,QACRC,QAAS,IACTC,aAAc,CACVC,cAAepB,EAASqB,YACxBC,QAAS,UACTV,KAAM,cAOnB,SAASc,EAAYC,GACxB,MAAkB,oBAARA,GAA+B,MAARA,E,WCmFtBC,E,kDAnLb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAJRC,WAAa,kBAGM,EAFnBC,mBAAqB,mBAEF,EA4CnBC,mBAAqB,SAACC,GAEhB,IAAIC,EAAiBD,EAAEE,OAAOC,MAAM,GACdC,IAAIC,gBAAgBJ,IA7C9C,EAAKK,MAAQ,CACXC,SAAU,GACVC,KAAOZ,EAAMY,KACbC,SAAUb,EAAMa,UAElB,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBATP,E,oDAYnB,SAAiBG,GACXrB,EAAYqB,GAMd7C,QAAQC,IAAI,iBALZ6C,KAAKT,MAAMG,SAASO,QAAQC,QAAQH,GAAUI,KAAK,CAACC,KAAMJ,KAAKT,MAAME,OAAOY,GAAG,mBAAmB,SAACC,GAEjG7C,EADe,CAAEC,IAAM,yBAA2BW,YAAa,4DACnC,gB,+BAQlC,WACEnB,QAAQC,IAAI,qCACZ6C,KAAKL,yB,8BAGP,WAEE,OADAzC,QAAQC,IAAI,yBAAyB6C,KAAKT,MAAME,MAE9CO,KAAKlB,WAAakB,KAAKT,MAAME,O,2BAIjC,WAEE,OADAvC,QAAQC,IAAI,kCAAkC6C,KAAKT,MAAME,MAEvDO,KAAKjB,mBAAqBiB,KAAKT,MAAME,O,0BAWzC,WAAe,IAAD,OACNc,EAAYC,SAASC,cAAc,cAEzC,GAAkB,OAAdF,EAAmB,CAEnB,IAAMG,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQL,EAAUnB,MAAM,IAExC,IAAIvC,EAAU,CACZgE,OAAQ,OACRC,KAAMJ,GAGR/D,EAAaqD,KAAKe,gBAAiBlE,GAChCE,MAAK,SAAAC,GACF,IAAIgE,EAAO,EAAKzB,MAAMC,SAClByB,EAAMjE,EAASiE,IACnB,GAAGD,EAAKE,SAASD,GAAK,CACpB/D,QAAQC,IAAI,qBAGZ,OADAM,EADe,CAAEC,IAAM,mBAAqBW,YAAa,kCAC7B,SACrB,KAGP,OADA,EAAKyB,iBAAiB9C,EAASiE,KACxBjE,EAASiE,OAEnBlE,MACD,SAAAkE,GACE,IAAIvC,EAAYuC,GAAK,CACnB,IAAID,EAAO,EAAKzB,MAAMC,SACtBwB,EAAKG,KAAKF,GACV,EAAKG,SAAS,CACZ5B,SAAWwB,QAKlBK,OAAM,SAAAvD,GACHZ,QAAQY,MAAM,+CAAgDA,WAGtEZ,QAAQC,IAAI,4B,kCAIhB,WAAuB,IAAD,OAEpBR,EAAaqD,KAAKsB,mBADJ,CAAC,OAAS,QAEvBvE,MAAK,SAAAC,GACF,IAAIuE,EAAO,GAES,MAAjBvE,EAASgE,OACRO,EAAOvE,EAASgE,MAIpBvD,EADe,CAAEC,IAAM,iBAAmBW,YAAa,8BAC3B,QAE5B,EAAK+C,SAAS,CAAE5B,SAAU+B,OAE7BF,OAAM,SAAAvD,GACH,EAAKsD,SAAS,CAAE5B,SAAU,KAC1BtC,QAAQY,MAAM,wCAAyCA,Q,oBAK7D,WAAU,IAAD,OACP,OACI,sBAAK0D,GAAG,UAAUC,UAAU,4BAA5B,UACE,qBAAKA,UAAU,MAAf,SACE,uBAAOA,UAAU,QAAjB,8BAIF,uBAAO7D,KAAK,SAAS6D,UAAU,eAAeC,MAAM,UAAUC,QAAS,SAAC1C,GAAD,OAAO,EAAKU,qBAAqBV,EAAE,EAAKM,MAAME,SAErH,qBAAKgC,UAAU,kBAAf,SACE,wBAAOA,UAAU,kCAAjB,UACA,uBAAOA,UAAU,KAAjB,SACE,+BAEG,uCACA,6CAIH,uBAAOA,UAAU,QAAjB,SAGMzB,KAAKT,MAAMC,SAASoC,KAAI,SAACjD,EAAMkD,GACnB,OACE,+BACE,6BACKA,EAAI,IAET,6BACQ,mBAAGC,KAAM,uBAAuBnD,EAAhC,SAAwCA,KADvCkD,gBAYjC,qBAAKJ,UAAU,4BAAf,SAEI,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SAEE,uBAAOD,GAAG,YAAaC,UAAU,oBAC7B7D,KAAK,OACLmE,SAAU/B,KAAKhB,uBAGrB,qBAAKyC,UAAU,SAAf,SACG,uBAAQA,UAAU,mBAAmB7D,KAAK,SAAS+D,QAAS3B,KAAKH,aAAc6B,MAAM,yB,GA9K/EM,aCCvBC,EAAUC,EAAQ,IAClBC,EAAUD,EAAQ,KAEhBE,E,kDAKJ,WAAYvD,GAAQ,IAAD,8BACjB,cAAMA,IALRC,WAAa,wBAIM,EAHnBC,mBAAqB,mBAGF,EAmBnBsD,gBAnBmB,uCAmBD,WAAOC,EAAWC,GAAlB,6BAAAC,EAAA,6DAIZC,EAAOC,OAAOD,KAJF,EAK2B,EAAKlD,MAAxCE,EALQ,EAKRA,KAAMkD,EALE,EAKFA,QAASC,EALP,EAKOA,gBACvB1F,QAAQC,IAAI,mBAAqByF,GAC7BC,EAASpD,EACTqD,EAAWC,KAAKC,MAAQ,IAC5B9F,QAAQC,IAAI2F,GATI,SAYML,EAAKQ,IAAIC,aAZf,OAYVC,EAZU,OAahBjG,QAAQC,IAAI,UAAWgG,GACvBV,EAAKW,gBAAgBC,UAAU,CAC7BxC,OAAQ,cACRyC,OAAQ,GACRC,QAAS,QACR,SAAUC,EAAKC,GACFA,EAAOA,OACrBvG,QAAQC,IAAI,QAASsG,GACrB,IAAMC,EAAYC,KAAKC,UAAU,CAC/BC,MACA,CACEC,aAAc,CACZ,CAAEC,KAAM,OAAQnG,KAAM,UACtB,CAAEmG,KAAM,UAAWnG,KAAM,UACzB,CAAEmG,KAAM,UAAWnG,KAAM,WACzB,CAAEmG,KAAM,oBAAqBnG,KAAM,YAErCoG,IAAK,CACH,CAAED,KAAM,SAAUnG,KAAM,WACxB,CAAEmG,KAAM,YAAanG,KAAM,UAC3B,CAAEmG,KAAM,WAAYnG,KAAM,UAC1B,CAAEmG,KAAM,WAAYnG,KAAM,UAI9BqG,YAAa,MACbC,OAAQ,CAAEH,KAAM,gBAAiBI,QAAS,IAAKhB,QAASA,EAASiB,kBAAmBxB,GACpFyB,QAAS,CACPC,OAAQzB,EACRP,UAAWA,EACXC,SAAUA,EACVO,SAAUA,KAIV1C,EAAOyC,EAEX3F,QAAQC,IAAI,qCAAsC,OAAQiD,EAAMsD,GAChE,IAAIJ,EAAS,CAAClD,EAAMsD,GACpBxG,QAAQqH,IAAIjB,GAGZb,EAAKW,gBAAgBC,UAAU,CAC7BxC,OAHW,uBAIXyC,SACAlD,QAHF,uCAIG,WAAgBoD,EAAKC,GAArB,uBAAAjB,EAAA,0DACGgB,EADH,yCACetG,QAAQqH,IAAIf,IAD3B,UAEGC,EAAO3F,OACT0G,MAAMf,EAAO3F,MAAMuG,UAEjBZ,EAAO3F,MALV,yCAKwBZ,QAAQY,MAAM,QAAS2F,IAL/C,cAMDvG,QAAQC,IAAI,gBAAkBwG,KAAKC,UAAUH,EAAOA,SAE9CgB,EAAYtC,EAAQuC,sBAAsB,CAAE/G,KAAMgG,KAAKgB,MAAMjB,GAAYkB,IAAKnB,EAAOA,SAEvFxB,EAAQ4C,kBAAkBJ,KAAexC,EAAQ4C,kBAAkBzE,GACrElD,QAAQC,IAAI,sCAAwCiD,GAEpDoE,MAAM,0CAA4Cf,EAAS,OAASrD,GAIhE0E,EAAYrB,EAAOA,OAAOsB,UAAU,GACpCC,EAAI,KAAOF,EAAUC,UAAU,EAAG,IAClCE,EAAI,KAAOH,EAAUC,UAAU,GAAI,KACnCG,EAAIC,SAASL,EAAUC,UAAU,IAAK,KAAM,IAClD7H,QAAQC,IAAI,KAAM6H,GAClB9H,QAAQC,IAAI,KAAM8H,GAClB/H,QAAQC,IAAI,KAAM+H,GAvBjB,UAyBKvC,EAAQ1C,QAAQmF,4BAA4BF,EAAGF,EAAGC,EAAGpC,EAAQC,EAAUR,EAAWC,GAAUpC,KAAK,CAAEC,KAAMX,IAzB9G,4CAJH,4DAmCF,EAAK2B,SAAS,CAACiE,WAAU,IA1FT,4CAnBC,wDAEjB,EAAK9F,MAAQ,CACXC,SAAU,GACVC,KAAMZ,EAAMY,KACZkD,QAAS9D,EAAM8D,QACfC,gBAAiB/D,EAAM+D,gBACvByC,WAAY,GAGd,EAAK1F,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXH,E,qDAcnB,WACE1C,QAAQC,IAAI,qCACZ6C,KAAKL,yB,2BAiGP,WAEE,OADAzC,QAAQC,IAAI,kCAAoC6C,KAAKT,MAAME,MAEzDO,KAAKjB,mBAAqBiB,KAAKT,MAAME,O,0BAIzC,WAAe,IAAD,OACNc,EAAYC,SAASC,cAAc,cAEzC,GAAkB,OAAdF,EAAoB,CAEtB,IAAMG,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQL,EAAUnB,MAAM,IAExC,IAAIvC,EAAU,CACZgE,OAAQ,OACRC,KAAMJ,GAGR/D,EAAaqD,KAAKe,gBAAiBlE,GAChCE,MAAK,SAAAC,GACO,EAAKuC,MAAMC,SAAtB,IACIyB,EAAMjE,EAASiE,IACnB,GAAI,EAAKqE,iBAAiBrE,GAAM,CAC9B/D,QAAQC,IAAI,qBAGZ,OADAM,EADe,CAAEC,IAAK,mBAAoBW,YAAa,kCAC1B,SACtB,KAEP,IAAIiE,EAAYtF,EAASiE,IACrBsB,EAAW,uBAAyBD,EAExC,OADA,EAAKD,gBAAgBC,EAAUC,GACxBvF,EAASiE,OAGnBI,OAAM,SAAAvD,GACLZ,QAAQY,MAAM,+CAAgDA,WAGlEZ,QAAQC,IAAI,4B,8BAIhB,SAAiB8D,GACf,IAAIhE,GAAS,EAQb,OAPW+C,KAAKT,MAAMC,SACjBoC,KAAI,SAACjD,EAAMkD,GACV5E,GAAU0B,EAAK2B,MAAQW,IACzB/D,QAAQC,IAAI,kBAAmB8D,GAC/BhE,GAAS,MAGNA,I,8BAIT,WAEE,OADAC,QAAQC,IAAI,yBAA2B6C,KAAKT,MAAME,MAEhDO,KAAKlB,WAAakB,KAAKT,MAAME,O,kCAIjC,WAAwB,IAAD,OAErB9C,EAAaqD,KAAKsB,mBADJ,CAAE,OAAU,QAEvBvE,MAAK,SAAAC,GACJ,IAAIuE,EAAO,GACXrE,QAAQC,IAAIH,GACW,MAAnBA,EAASuI,SACXhE,EAAOvE,EAASuI,QAIlB9H,EADe,CAAEC,IAAK,iBAAkBW,YAAa,8BACxB,QAE7B,EAAK+C,SAAS,CAAE5B,SAAU+B,OAE3BF,OAAM,SAAAvD,GACL,EAAKsD,SAAS,CAAE5B,SAAU,KAC1BtC,QAAQY,MAAM,wCAAyCA,Q,oBAK7D,WAAU,IAAD,OACP,OAAK4E,OAAOD,KAIV,8BAEE,sBAAKjB,GAAG,UAAUC,UAAU,4BAA5B,UACE,qBAAKA,UAAU,MAAf,SACE,uBAAOA,UAAU,QAAjB,8BAIF,uBAAO7D,KAAK,SAAS6D,UAAU,eAAeC,MAAM,UAAUC,QAAS,SAAC1C,GAAD,OAAO,EAAKU,qBAAqBV,MAExG,qBAAKwC,UAAU,kBAAf,SACE,wBAAOA,UAAU,kCAAjB,UACE,uBAAOA,UAAU,KAAjB,SACE,+BAEE,uCACA,4CACA,iDAIJ,uBAAOA,UAAU,QAAjB,SAGIzB,KAAKT,MAAMC,SAASoC,KAAI,SAACjD,EAAMkD,GAC7B,OACE,+BACE,6BACGA,EAAI,IAEP,6BACGlD,EAAK6G,QAER,6BACE,mBAAG1D,KAAM,uBAAyBnD,EAAK2B,KAAvC,SAA+C3B,EAAK2B,QAD7CuB,gBAYvB,qBAAKJ,UAAU,4BAAf,SAEE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SAEE,uBAAOD,GAAG,YAAYC,UAAU,oBAC9B7D,KAAK,OACLmE,SAAU/B,KAAKhB,uBAGnB,qBAAKyC,UAAU,SAAf,SACE,uBAAOA,UAAU,mBAAmB7D,KAAK,SAAS+D,QAAS3B,KAAKH,aAAc6B,MAAM,uBA3DvF,8E,GA9MSM,aAqRPI,ICrRTqD,E,kDAEJ,WAAY5G,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXmG,QAAU,GACVC,SAAU,EACVjG,SAAU,KACViD,QAAS,KACTC,gBAAiB,MAPF,E,4FAYpB,sBAAAJ,EAAA,sEACSxC,KAAK4F,WADd,uBAES5F,KAAK6F,qBAFd,gD,6HAMC,wCAAArD,EAAA,6DACQC,EAAOC,OAAOD,KADtB,SAEyBA,EAAKQ,IAAI6C,cAFlC,cAEQC,EAFR,OAGE7I,QAAQC,IAAI,kBAAkB4I,GAC9B/F,KAAKoB,SAAS,CAACsE,QAASK,EAAS,KAJnC,SAK0BtD,EAAKQ,IAAI+C,IAAIC,QALvC,OAKQC,EALR,QAQQC,EAAeC,EAASC,SAASH,KAErChJ,QAAQC,IAAI,qBAAuBgJ,EAAaG,SAC1C5G,EAAW,IAAI+C,EAAKQ,IAAIsD,SAASH,EAASI,IAAKL,EAAaG,SAClEtG,KAAKoB,SAAS,CAAC1B,cAEfgD,OAAO8B,MAAM,qDAKTiC,EAAoBC,EAAcL,SAASH,KAE/ChJ,QAAQC,IAAI,qBAAuBsJ,EAAkBH,SAC/C3D,EAAU,IAAIF,EAAKQ,IAAIsD,SAASG,EAAcF,IAAKC,EAAkBH,SAC3EtG,KAAKoB,SAAS,CAACuB,YACf3C,KAAKoB,SAAS,CAACwB,gBAAkB6D,EAAkBH,WAEnD5D,OAAO8B,MAAM,yDAGfxE,KAAKoB,SAAS,CAACuE,SAAS,IA7B1B,iD,mHAgCA,sBAAAnD,EAAA,0DACKE,OAAOiE,SADZ,uBAEIjE,OAAOD,KAAO,IAAImE,IAAKlE,OAAOiE,UAFlC,SAGUjE,OAAOiE,SAASE,SAH1B,6BAKWnE,OAAOD,KACdC,OAAOD,KAAO,IAAImE,IAAKlE,OAAOD,KAAKW,iBAGnCV,OAAO8B,MAAM,+DATjB,2C,oFAaA,WACE,IAAIxE,KAAKT,MAAMoG,QACb,OACE,cAAC,EAAD,CACAlG,KAAMO,KAAKT,MAAMmG,QACjBhG,SAAUM,KAAKT,MAAMG,a,yBAO3B,WACE,IAAIM,KAAKT,MAAMoG,QACb,OACE,cAAC,EAAD,CACAlG,KAAMO,KAAKT,MAAMmG,QACjB/C,QAAS3C,KAAKT,MAAMoD,QACpBC,gBAAiB5C,KAAKT,MAAMqD,oB,oBAKlC,WACE,OACI,sBAAKpB,GAAG,UAAUC,UAAU,OAA5B,UAKA,oBAAKqF,MAAO,CACRC,MAAO,UACPC,gBAAiB,UACjBC,OAAQ,EACRC,YAAc,aAKhBlH,KAAKmH,qB,GAxGInF,aA8GJyD,I,cCpGA2B,MAVf,WACE,OACE,gCAEE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,MAAO,CAACC,MAAO,SCAbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1K,MAAK,YAAkD,IAA/C2K,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCEdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFxH,SAASyH,eAAe,SAM1BV,M","file":"static/js/main.cb51c276.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Alert from 'react-s-alert';\n\nvar baseUrl = \"http://127.0.0.1:5000\" ;\nvar x_access_token_cookie = \"x-access-token\";\nvar x_user_id_cookie = \"x-user-id\";\n\nexport function fetchPromise(url, options) {\n    return fetch(baseUrl + url, options)\n    .then(response => {\n        if(response.status === 401) {\n           console.log(\"Authentication failure\")\n        } else if(response.status === 403) {\n            console.log(\"Access Denied\")\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.indexOf(\"application/json\") !== -1) {\n            return response.json();\n        } else {\n            return response;\n        }  \n\n    }).then(response => {\n        if(response.status === 'FORBIDDEN') {\n            displayCustomPopup({msg: response.msg || 'Unauthorised for current operation'}, 'error');\n            //return null to the caller function so that no further processing should happen in caller function\n            return null;\n        } else if(response.status === 'FAILED' || response.status === 'Not Modified') {\n            displayCustomPopup(response, 'error');\n            return null;\n        } else if(response.status === 'SUCCESS') {\n            displayCustomPopup(response, 'success');\n        } else if(response.status === 'WARN') {\n            displayCustomPopup(response, 'warning');\n        }\n        \n        if(response.data) {\n            return response.data;\n        }\n        return response;\n    });\n}\n\n\n\nexport function displayCustomPopup(response, type) {\n    switch(type) {\n        case 'error': \n            console.log(\"Dispaly error popup\")\n            Alert.error(response.msg, {\n                position: 'bottom-right',\n                html: true,\n                effect: 'slide',\n                timeout: 30000,\n                customFields: {\n                    detailedError: response.detailedMsg,\n                    heading: 'Error',\n                    type: 'error'\n                }\n            });\n            break;\n        case 'success':\n            Alert.success(response.msg, {\n                position: 'bottom-right',\n                html: true,\n                effect: 'slide',\n                timeout: 30000,\n                customFields: {\n                    detailedError: response.detailedMsg,\n                    heading: 'Success',\n                    type: 'success'\n                }\n            });\n            break;\n        case 'info':\n            console.log(\"Dispaly info popup:\" + response.msg)\n            Alert.info(response.msg, {\n                position: 'bottom-right',\n                html: true,\n                effect: 'slide',\n                timeout: 30000,\n                customFields: {\n                    detailedError: response.detailedMsg,\n                    heading: 'Info',\n                    type: 'info'\n                }\n            });\n            break;\n        case 'warning':\n            Alert.warning(response.msg, {\n                position: 'bottom-right',\n                html: true,\n                effect: 'slide',\n                timeout: 30000,\n                customFields: {\n                    detailedError: response.detailedMsg,\n                    heading: 'Warning',\n                    type: 'warning'\n                }\n            });\n            break;\n    }\n}\n\nexport function isUndefined(item) {\n    if(typeof item == \"undefined\" || item == null){\n        return true\n    }\n    return false \n}\n\nexport function isAuthenticated(){\n    if(hasCookie(x_access_token_cookie) && hasCookie(x_user_id_cookie)){\n        return true;\n    }\n    return false ;\n}\n\nfunction hasCookie(cname){\n    if(getCookie(cname) == null){\n        return false ;\n    }\n    return true ;\n}\n\nfunction getCookie(cname) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) == ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) == 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return null;\n}\n\n\nexport function getURIParam(key){\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    return params.get(key);\n}\n\nexport function formatDate(dateStr){\n    if(!isUndefined(dateStr)){\n        dateStr = dateStr.replace(\"[UTC]\", \"\");\n        const date = new Date(dateStr);\n        return date.getHours()+\" hr \"+date.getMinutes()+ \" min, \"+date.getDate()+\" \"+date.toLocaleString('default', { month: 'long' }) + \" \" +date.getFullYear();\n    }\n}","import React, {Component} from 'react'\nimport { isUndefined,fetchPromise,displayCustomPopup } from '../common/CustomUtilities';\n\nclass UserIpfsCids extends Component {\n\n  cidsApiUrl = \"/get_ipfs_cids/\"\n  uploadToIpfsApiUrl = \"/upload_to_ipfs/\"\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ipfsCids: [],\n      user : props.user,\n      archiver: props.archiver\n    };\n    this.fetchIpfsCidsForUser = this.fetchIpfsCidsForUser.bind(this);\n    this.uploadToIpfs = this.uploadToIpfs.bind(this)\n    this.callArchiveOnEth = this.callArchiveOnEth.bind(this)\n  }\n\n  callArchiveOnEth(ipfs_cid){\n    if(!isUndefined(ipfs_cid)){\n      this.state.archiver.methods.archive(ipfs_cid).send({from: this.state.user}).on('transactionHash', (hash) => {\n        var popupMsg = { msg : \"Archived  successfully\" , detailedMsg: \"File was uploaded to ipfs and cid was logged on ethereum\"}\n        displayCustomPopup(popupMsg,\"success\")\n      })\n    } else {\n      console.log(\"No cid passed\")\n    }\n  }\n\n\n  componentDidMount() {\n    console.log(\"Mounting Ipfs Cids Page component\")\n    this.fetchIpfsCidsForUser();\n  }\n\n  ipfsCidsFetchUri(){\n    console.log(\"User account for cids:\"+this.state.user)\n    return (\n      this.cidsApiUrl + this.state.user\n    )\n  }\n\n  ipfsUploadUri(){\n    console.log(\"User account for uploadin ipfs:\"+this.state.user)\n    return (\n      this.uploadToIpfsApiUrl + this.state.user\n    )\n  }\n\n  // Image Preview Handler\n  handleImagePreview = (e) => {\n\n        let image_as_files = e.target.files[0]\n        let image_as_base64 = URL.createObjectURL(image_as_files)\n  }\n\n  uploadToIpfs(){\n    const fileInput = document.querySelector(\"#fileInput\");\n\n    if (fileInput !== null){\n\n        const formData = new FormData();\n        formData.append(\"file\", fileInput.files[0]);\n\n        var options = {\n          method: \"POST\",\n          body: formData\n        }\n\n        fetchPromise(this.ipfsUploadUri() ,options)\n          .then(response => {\n              var cids = this.state.ipfsCids ;\n              var cid = response.cid;\n              if(cids.includes(cid)){\n                console.log(\"Cid already added\");\n                var popupMsg = { msg : \"Already Archived\" , detailedMsg: \"You have archived file already\"}\n                displayCustomPopup(popupMsg,\"error\")\n                return null ;\n              } else {\n                this.callArchiveOnEth(response.cid)\n                return response.cid;\n              }\n          }).then(\n            cid => {\n              if(!isUndefined(cid)){\n                var cids = this.state.ipfsCids   \n                cids.push(cid)\n                this.setState({\n                  ipfsCids : cids\n                })\n              }\n            }\n          )\n          .catch(error => {\n              console.error('Some error while uploading to user ipfs cids', error);\n          });\n    } else {\n      console.log(\"No image file selected\")\n    }\n  }\n\n  fetchIpfsCidsForUser(){\n    var options = {'method':'GET'} \n    fetchPromise(this.ipfsCidsFetchUri(),options)\n    .then(response => {\n        var docs = [] ;\n\n        if(response.cids != null){\n            docs = response.cids ;\n        }\n    \n        var popupMsg = { msg : \"Refreshed CIDs\" , detailedMsg: \"Your all ipfs cids fetched\"}\n        displayCustomPopup(popupMsg,\"info\")\n\n        this.setState({ ipfsCids: docs });     \n    })\n    .catch(error => {\n        this.setState({ ipfsCids: [] });\n        console.error('Some error in fetching user ipfs cids', error);\n    });\n}\n\n\n  render() {\n    return (\n        <div id='content' className='container form-control-lg'>\n          <div className=\"row\">\n            <label className=\"label\">Your IPFS CIDs</label>\n          </div>\n           \n\n          <input type=\"button\" className=\"btn btn-info\" value='refresh' onClick={(e) => this.fetchIpfsCidsForUser(e,this.state.user)} />\n\n          <div className=\"grid container \">\n            <table className=\"table table-striped table-hover\"> \n            <thead className=\"th\">\n              <tr>\n                \n                 <td> Sno </td>\n                 <td> CIDS </td>\n                \n              </tr>\n              </thead>\n              <tbody className=\"tbody\">\n                {\n                  \n                    this.state.ipfsCids.map((item, i) => {\n                                return (\n                                  <tr>\n                                    <td>\n                                        {i + 1}\n                                    </td>\n                                    <td key={i}>\n                                            <a href={\"http://ipfs.io/ipfs/\"+item} >{item}</a>\n                                    </td>\n                                  </tr>\n                                )\n                    \n                            }\n                    )\n                }\n                </tbody>\n                </table>\n            </div>\n            <div className=\"container form-control-sm\">\n          \n                <div className=\"row\">\n                  <div className=\"col-sm\">\n                     {/* image input field */}\n                    <input id=\"fileInput\"  className=\"btn btn-secondary\"\n                        type=\"file\"\n                        onChange={this.handleImagePreview}\n                    />\n                  </div>\n                  <div className=\"col-sm\">\n                     <input  className=\"btn btn-primary \" type=\"submit\" onClick={this.uploadToIpfs} value=\"Upload\"/>\n                  </div>\n                </div>  \n                \n            </div>\n        </div>\n      );\n    }\n  }\n    \nexport default UserIpfsCids;","import React, { Component } from 'react'\nimport { isUndefined, fetchPromise, displayCustomPopup } from '../common/CustomUtilities';\n\n\nvar ethUtil = require('ethereumjs-util');\nvar sigUtil = require('eth-sig-util');\n\nclass Gallery extends Component {\n  cidsApiUrl = \"/nft/get_user_tokens/\"\n  uploadToIpfsApiUrl = \"/upload_to_ipfs/\"\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ipfsCids: [],\n      user: props.user,\n      gallery: props.gallery,\n      gallery_address: props.gallery_address,\n      isMinting : false\n    };\n\n    this.fetchIpfsCidsForUser = this.fetchIpfsCidsForUser.bind(this);\n    this.uploadToIpfs = this.uploadToIpfs.bind(this)\n  }\n\n  componentDidMount() {\n    console.log(\"Mounting Ipfs Cids Page component\")\n    this.fetchIpfsCidsForUser();\n  }\n\n  signDataAndMint = async (ipfs_hash, ipfs_url) => {\n//    const ipfs_hash = \"QmZPoCCKnqQ6tA7aNHZ3bRbYodM8qo8Cs2Uj26eTTc9fSJ\"\n//    const ipfs_url = \"http://ipfs.io/ipfs/QmZPoCCKnqQ6tA7aNHZ3bRbYodM8qo8Cs2Uj26eTTc9fSJ\"\n\n    var web3 = window.web3\n    const { user, gallery, gallery_address } = this.state;\n    console.log('gallery address:' + gallery_address)\n    var signer = user;\n    var deadline = Date.now() + 100000;\n    console.log(deadline);\n\n\n    const chainId = await web3.eth.getChainId()\n    console.log(\"chainId\", chainId);\n    web3.currentProvider.sendAsync({\n      method: 'net_version',\n      params: [],\n      jsonrpc: \"2.0\"\n    }, function (err, result) {\n      const netId = result.result;\n      console.log(\"netId\", result);\n      const msgParams = JSON.stringify({\n        types:\n        {\n          EIP712Domain: [\n            { name: \"name\", type: \"string\" },\n            { name: \"version\", type: \"string\" },\n            { name: \"chainId\", type: \"uint256\" },\n            { name: \"verifyingContract\", type: \"address\" }\n          ],\n          set: [\n            { name: \"sender\", type: \"address\" },\n            { name: \"ipfs_hash\", type: \"string\" },\n            { name: \"ipfs_url\", type: \"string\" },\n            { name: \"deadline\", type: \"uint\" }\n          ]\n        },\n        //make sure to replace verifyingContract with address of deployed contract\n        primaryType: \"set\",\n        domain: { name: \"GalleryERC721\", version: \"1\", chainId: chainId, verifyingContract: gallery_address },\n        message: {\n          sender: signer,\n          ipfs_hash: ipfs_hash,\n          ipfs_url: ipfs_url,\n          deadline: deadline\n        }\n      })\n\n      var from = signer;\n\n      console.log('CLICKED, SENDING PERSONAL SIGN REQ', 'from', from, msgParams)\n      var params = [from, msgParams]\n      console.dir(params)\n      var method = 'eth_signTypedData_v3'\n\n      web3.currentProvider.sendAsync({\n        method,\n        params,\n        from,\n      }, async function (err, result) {\n        if (err) return console.dir(err)\n        if (result.error) {\n          alert(result.error.message)\n        }\n        if (result.error) return console.error('ERROR', result)\n        console.log('TYPED SIGNED:' + JSON.stringify(result.result))\n\n        const recovered = sigUtil.recoverTypedSignature({ data: JSON.parse(msgParams), sig: result.result })\n\n        if (ethUtil.toChecksumAddress(recovered) === ethUtil.toChecksumAddress(from)) {\n          console.log('Successfully ecRecovered signer as ' + from)\n        } else {\n          alert('Failed to verify signer when comparing ' + result + ' to ' + from)\n        }\n\n        //getting r s v from a signature\n        const signature = result.result.substring(2);\n        const r = \"0x\" + signature.substring(0, 64);\n        const s = \"0x\" + signature.substring(64, 128);\n        const v = parseInt(signature.substring(128, 130), 16);\n        console.log(\"r:\", r);\n        console.log(\"s:\", s);\n        console.log(\"v:\", v);\n\n        await gallery.methods.executeMintIfSignatureMatch(v, r, s, signer, deadline, ipfs_hash, ipfs_url).send({ from: user });\n\n      })\n    })\n\n          \n    this.setState({isMinting:false});\n  }\n\n\n  ipfsUploadUri() {\n    console.log(\"User account for uploadin ipfs:\" + this.state.user)\n    return (\n      this.uploadToIpfsApiUrl + this.state.user\n    )\n  }\n\n  uploadToIpfs(){\n    const fileInput = document.querySelector(\"#fileInput\");\n\n    if (fileInput !== null) {\n\n      const formData = new FormData();\n      formData.append(\"file\", fileInput.files[0]);\n\n      var options = {\n        method: \"POST\",\n        body: formData\n      }\n\n      fetchPromise(this.ipfsUploadUri(), options)\n        .then(response => {\n          var cids = this.state.ipfsCids;\n          var cid = response.cid;\n          if (this.hasAlreadyMinted(cid)) {\n            console.log(\"Cid already added\");\n            var popupMsg = { msg: \"Already Archived\", detailedMsg: \"You have archived file already\" }\n            displayCustomPopup(popupMsg, \"error\")\n            return null;\n          } else {\n            var ipfs_hash = response.cid ;\n            var ipfs_url = \"http://ipfs.io/ipfs/\" + ipfs_hash;\n            this.signDataAndMint(ipfs_hash,ipfs_url)\n            return response.cid;\n          }\n        })\n        .catch(error => {\n          console.error('Some error while uploading to user ipfs cids', error);\n        });\n    } else {\n      console.log(\"No image file selected\")\n    }\n  }\n\n  hasAlreadyMinted(cid){\n    var status = false \n    var cids = this.state.ipfsCids\n    cids.map((item, i) => {\n      if(!status && item.hash == cid){\n        console.log(\"Already minted:\"+ cid)\n        status = true ;\n      }\n    })\n    return status;\n  }\n\n\n  ipfsCidsFetchUri() {\n    console.log(\"User account for cids:\" + this.state.user)\n    return (\n      this.cidsApiUrl + this.state.user\n    )\n  }\n\n  fetchIpfsCidsForUser() {\n    var options = { 'method': 'GET' }\n    fetchPromise(this.ipfsCidsFetchUri(), options)\n      .then(response => {\n        var docs = [];\n        console.log(response)\n        if (response.tokens != null) {\n          docs = response.tokens;\n        }\n\n        var popupMsg = { msg: \"Refreshed CIDs\", detailedMsg: \"Your all ipfs cids fetched\" }\n        displayCustomPopup(popupMsg, \"info\")\n\n        this.setState({ ipfsCids: docs });\n      })\n      .catch(error => {\n        this.setState({ ipfsCids: [] });\n        console.error('Some error in fetching user ipfs cids', error);\n      });\n  }\n\n\n  render() {\n    if (!window.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div>\n\n        <div id='content' className='container form-control-lg'>\n          <div className=\"row\">\n            <label className=\"label\">Your IPFS CIDs</label>\n          </div>\n\n\n          <input type=\"button\" className=\"btn btn-info\" value='refresh' onClick={(e) => this.fetchIpfsCidsForUser(e)} />\n\n          <div className=\"grid container \">\n            <table className=\"table table-striped table-hover\">\n              <thead className=\"th\">\n                <tr>\n\n                  <td> Sno </td>\n                  <td> Token Id </td>\n                  <td> Ipfs CID </td>\n\n                </tr>\n              </thead>\n              <tbody className=\"tbody\">\n                {\n\n                  this.state.ipfsCids.map((item, i) => {\n                    return (\n                      <tr>\n                        <td>\n                          {i + 1}\n                        </td>\n                        <td>\n                          {item.token}\n                        </td>\n                        <td key={i}>\n                          <a href={\"http://ipfs.io/ipfs/\" + item.hash} >{item.hash}</a>\n                        </td>\n                      </tr>\n                    )\n\n                  }\n                  )\n                }\n              </tbody>\n            </table>\n          </div>\n          <div className=\"container form-control-sm\">\n\n            <div className=\"row\">\n              <div className=\"col-sm\">\n                {/* image input field */}\n                <input id=\"fileInput\" className=\"btn btn-secondary\"\n                  type=\"file\"\n                  onChange={this.handleImagePreview}\n                />\n              </div>\n              <div className=\"col-sm\">\n                <input className=\"btn btn-primary \" type=\"submit\" onClick={this.uploadToIpfs} value=\"Upload\" />\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Gallery;","import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Archiver from '../contract_meta/Archiver.json'\nimport GalleryERC721 from '../contract_meta/GalleryERC721.json'\nimport UserIpfsCids from './archiver/UserIpfsCids'\nimport Gallery from './archiver/Gallery'\n\nclass Main extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account : '',\n      loading : true,\n      archiver: null,\n      gallery: null,\n      gallery_address: null\n    };\n   \n  }\n\n async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    console.log(\"User Account : \"+accounts)\n    this.setState({account: accounts[0]})\n    const networkId = await web3.eth.net.getId()\n\n    //LOAD Archiver\n    const archiverData = Archiver.networks[networkId]\n    if(archiverData) {\n      console.log('Contract Address :' + archiverData.address)\n      const archiver = new web3.eth.Contract(Archiver.abi, archiverData.address)\n      this.setState({archiver})\n    } else {\n      window.alert(\"archiver contract not deployed to detect network\")\n    }\n\n\n    //LOAD Gallery\n    const galleryErc721Data = GalleryERC721.networks[networkId]\n    if(galleryErc721Data) {\n      console.log('Contract Gallery :' + galleryErc721Data.address)\n      const gallery = new web3.eth.Contract(GalleryERC721.abi, galleryErc721Data.address)\n      this.setState({gallery})\n      this.setState({gallery_address : galleryErc721Data.address })\n    } else {\n      window.alert(\"GalleryERC721 contract not deployed to detect network\")\n    }\n\n    this.setState({loading: false})\n  }\n\n  async loadWeb3() {\n    if(window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non ethereum browser detected. You should consider Metamask')\n    }\n  }\n\n  loadUserIpfsCids(){\n    if(!this.state.loading){\n      return (\n        <UserIpfsCids \n        user={this.state.account}\n        archiver={this.state.archiver}\n        ></UserIpfsCids>\n      )\n    }\n  }\n\n\n  loadGallery(){\n    if(!this.state.loading){\n      return (\n        <Gallery\n        user={this.state.account}\n        gallery={this.state.gallery}\n        gallery_address={this.state.gallery_address}></Gallery>\n      )\n    }\n  }\n\n  render() {\n    return (\n        <div id='content' className='mt-3'> \n        {\n         // this.loadUserIpfsCids()\n        }\n\n        <hr  style={{\n            color: '#000000',\n            backgroundColor: '#000000',\n            height: 1,\n            borderColor : '#000000'\n        }}/>\n\n\n        {\n          this.loadGallery()\n        }\n        </div>\n      );\n    }\n}\nexport default Main;","import logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main';\nimport Alert from 'react-s-alert';\nimport 'react-s-alert/dist/s-alert-default.css';\nimport 'react-s-alert/dist/s-alert-css-effects/slide.css';\n\nfunction App() {\n  return (\n    <div>\n\n      <Main/>\n      <Alert stack={{limit: 3}} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}